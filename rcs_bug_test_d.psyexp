<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.2.5">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant':'f&quot;{randint(0, 999999):06.0f}&quot;', 'session':'001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="(1024, 768)" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="rcs_bug_test_d" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="MIDDLE_BUTTON" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <CodeComponent name="code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# import json&amp;#10;import os&amp;#10;import time&amp;#10;&amp;#10;# How many seconds to wait before deciding that the recording computer&amp;#10;# BEFORE RUNNING THIS, start up RCS manually on the recording computer.&amp;#10;# And make sure that the BrainVision Recorder is open and running too.&amp;#10;&amp;#10;# If we're testing at home, we want to be able to run through the&amp;#10;# experiments with just pretend EMG recording.&amp;#10;# But if we're in the lab, we absolutely want to stop everything&amp;#10;# if there's a problem with the EMG recording and figure out what's wrong.&amp;#10;TESTING_AT_HOME = False&amp;#10;&amp;#10;# How many seconds to wait before deciding that the recording computer&amp;#10;# can't be reached.&amp;#10;TIMEOUT = 4&amp;#10;&amp;#10;# How many seconds to spend collecting a baseline EMG measurement.&amp;#10;# During the actual experiment this will be 60 seconds.&amp;#10;# While we're still testing things, it's convenient to have this&amp;#10;# be shorter so we don't have to wait so long each time the experiment runs.&amp;#10;# BASELINE_DURATION = 30&amp;#10;&amp;#10;# These are for tracking when recording starts&amp;#10;# so that we can measure how long it actually happened&amp;#10;# RECORDING_STARTED = 0&amp;#10;&amp;#10;# All these settings tell Python where to find the RCS program&amp;#10;# running on the recording computer.&amp;#10;WORKSPACE = &quot;C:/Vision/Workfiles/Sadism Disgust.rwksp&quot;&amp;#10;HOST = &quot;172.20.71.7&quot;&amp;#10;PORT = 6700&amp;#10;AMPLIFIER = &quot;BrainAmp Family&quot;&amp;#10;&amp;#10;# expInfo['session'] = &quot;Visual&quot;&amp;#10;&amp;#10;# Read in the list of opponents for this subject.&amp;#10;# This reads the text file where they are stored,&amp;#10;# and reads them in as a Python list.&amp;#10;# subject_id = expInfo['participant']&amp;#10;# with open(os.path.join(&quot;data&quot;, &quot;disgust_images.txt&quot;), &quot;rt&quot;) as f:&amp;#10;# with open(os.path.join(&quot;data&quot;, f&quot;disgust_images_{subject_id}.txt&quot;), &quot;rt&quot;) as f:&amp;#10; #    disgust_image_paths = json.loads(f.read())&amp;#10;&amp;#10;# Connect to the Brain Products Remote Control Server&amp;#10;# API documentation at&amp;#10;# https://www.psychopy.org/api/hardware/brainproducts.html&amp;#10;&amp;#10;# Try to connect to the computer running BrainProducts Recorder.&amp;#10;try:&amp;#10;    from psychopy.hardware import brainproducts&amp;#10;    RCS = brainproducts.RemoteControlServer(&amp;#10;        host=HOST,&amp;#10;        port=PORT,&amp;#10;        timeout=TIMEOUT,&amp;#10;    )&amp;#10;&amp;#10;    # If connection is successful, print a little notification.&amp;#10;    print(&quot;INFO:&quot;)&amp;#10;    print(&quot;RCS connection SUCCESSFUL, EMG will be recorded.&quot;)&amp;#10;    print()&amp;#10;&amp;#10;    # If you ever wanted to the Recorder remotely, you can do it with&amp;#10;    # these lines. We're not doing this, because we want to give the&amp;#10;    # experimenter a little more control.&amp;#10;    # RCS.openRecorder()&amp;#10;    # time.sleep(2)&amp;#10;&amp;#10;except Exception:&amp;#10;    # If we're at home and&amp;#10;    # if connection isn't successful, assume the experiment is going to run&amp;#10;    # in test mode with dummy commands and responses.&amp;#10;    if TESTING_AT_HOME:&amp;#10;        print(&quot;INFO:&quot;)&amp;#10;        print(&quot;RCS connection wasn't successful.&quot;)&amp;#10;        print(&quot;Running in MOCK recording mode.&quot;)&amp;#10;        print()&amp;#10;        RCS = None&amp;#10;    else:&amp;#10;        # If we're in the lab, make sure to loudly fail with&amp;#10;        # an error message so we can try to figure out what's wrong.&amp;#10;        raise Exception&amp;#10;&amp;#10;# If the connection is successful, get the EMG recording set up.&amp;#10;if RCS is not None:&amp;#10;    # Provide the type of amplifier (with serial number when using LiveAmp).&amp;#10;    RCS.amplifier = AMPLIFIER&amp;#10;&amp;#10;    # Turn overwrite protection on.&amp;#10;    RCS.overwriteProtection = True&amp;#10;&amp;#10;    # Start monitoring (this will wait for a positive confirmation or timeout)&amp;#10;    # RCS automatically starts up in &quot;default&quot; mode, but we'll set it&amp;#10;    # here just to play it safe.&amp;#10;    RCS.mode = &quot;default&quot;&amp;#10;    # Just sit and wait for one second.&amp;#10;    # These seem to be necessary in order to give the recorder time&amp;#10;    # to process the commands.&amp;#10;    time.sleep(2)&amp;#10;&amp;#10;    # Perform a DC reset.&amp;#10;    # This is only necessary if you're NOT going to do a high-pass filter&amp;#10;    # step on the data later.&amp;#10;    # We are going to high-pass filter, so we don't need to do this part&amp;#10;    # RCS.dcReset()&amp;#10;    # time.sleep(1)&amp;#10;&amp;#10;    # Tell RCS where to set up the workspace.&amp;#10;    RCS.workspace = WORKSPACE&amp;#10;    # `expName` (the name of the experiment) and&amp;#10;    # `expInfo` (a variable with the experiment information)&amp;#10;    # will already be defined in the psychopy code.&amp;#10;    RCS.expName = expName  # NoQA: F821&amp;#10;    # Pull out the participant name from `expInfo`.&amp;#10;    # RCS.participant = f&quot;{expInfo['participant']}&quot;  # NoQA: F821&amp;#10;    RCS.participant = &quot;test_A_participant&quot;  # NoQA: F821&amp;#10;    time.sleep(2)&amp;#10;&amp;#10;    # Switch the recorder over to monitoring mode.&amp;#10;    # This means it's ready to start recording.&amp;#10;    RCS.mode = &quot;monitor&quot;&amp;#10;    time.sleep(2)&amp;#10;&amp;#10;    # Start up the recording, give it a couple seconds to&amp;#10;    # settle in, then pause it so that it's ready to go&amp;#10;    # for the rest of the experiment.&amp;#10;    RCS.startRecording()&amp;#10;    time.sleep(4)&amp;#10;    RCS.pauseRecording()&amp;#10;    time.sleep(2)&amp;#10;&amp;#10;'''&amp;#10;def start_EMG_recording(annotation=None):&amp;#10;    # Keep track of when this snippet of EMG started recording.&amp;#10;    recording_start_time = time.time()&amp;#10;    # Set up the annotation.&amp;#10;    if annotation is None:&amp;#10;        # If the annotataion wasn't provided, note&amp;#10;        # the recording start time.&amp;#10;        annotation = f&quot;recording started at {int(recording_start_time)}&quot;&amp;#10;    annotation_type = &quot;start&quot;&amp;#10;&amp;#10;    # If there is no recording going on, do mock recording,&amp;#10;    # showing some pretend messages in the psychopy run window.&amp;#10;    if RCS is None:&amp;#10;        print()&amp;#10;        print(&quot;MOCK:  Pretend EMG recording started&quot;)&amp;#10;        print(f&quot;MOCK:  Annotated '{annotation}, {annotation_type}'&quot;)&amp;#10;&amp;#10;    else:&amp;#10;        # Restart the recording and annotate it.&amp;#10;        RCS.resumeRecording()&amp;#10;        RCS.sendAnnotation(annotation, annotation_type)&amp;#10;&amp;#10;    return recording_start_time&amp;#10;&amp;#10;&amp;#10;def stop_EMG_recording(recording_stop_time):&amp;#10;    # Note when the snippet stopped recording and&amp;#10;    # calculate how long it has been recording.&amp;#10;    recording_stop_time = time.time()&amp;#10;    duration = recording_stop_time - RECORDING_STARTED&amp;#10;&amp;#10;    # If there is no recording going on, do mock recording,&amp;#10;    # showing some pretend messages on the console.&amp;#10;    if RCS is None:&amp;#10;        print()&amp;#10;        print(&quot;MOCK:  Pretend EMG recording stopped&quot;)&amp;#10;        print(f&quot;MOCK:  {duration} seconds of fake EMG recorded&quot;)&amp;#10;&amp;#10;    else:&amp;#10;        # Pause the recording.&amp;#10;        RCS.pauseRecording()&amp;#10;'''" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="connected">
      <TextComponent name="text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Connected" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="trial"/>
    <Routine name="connected"/>
  </Flow>
</PsychoPy2experiment>
